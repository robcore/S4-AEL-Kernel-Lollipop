From 37bb90b250ab130e8ca1c662d06757c298ae4f6f Mon Sep 17 00:00:00 2001
From: Pranav Vashi <neobuddy89@gmail.com>
Date: Wed, 4 Mar 2015 23:19:32 +0530
Subject: [PATCH] drivers: Add state notifier driver

* Doze mode and FB notiers aren't friendly.
  Introduce state notifier to make things smooth.

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 drivers/input/touchscreen/Kconfig            |  5 +++
 drivers/input/touchscreen/Makefile           |  1 +
 drivers/input/touchscreen/atmel_mxt_ts_mmi.c | 48 ++++++++++++++++++++++-----
 drivers/input/touchscreen/state_notifier.c   | 49 ++++++++++++++++++++++++++++
 include/linux/state_notifier.h               | 27 +++++++++++++++
 5 files changed, 122 insertions(+), 8 deletions(-)
 create mode 100644 drivers/input/touchscreen/state_notifier.c
 create mode 100644 include/linux/state_notifier.h

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index c6101c1..1f98045 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -1139,6 +1139,11 @@ config TOUCHSCREEN_TOUCHX
 config WAKE_GESTURES
         bool "Wake Gestures"
 
+config STATE_NOTIFIER
+        bool "State Notifier"
+	depends on TOUCHSCREEN_ATMEL_MXT_MMI
+	default y
+
 source "drivers/input/touchscreen/gt9xx/Kconfig"
 
 endif
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 6040f601..af4a3a2 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -98,3 +98,4 @@ obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_TEST_REPORTING) += synaptics_dsx_test_rep
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE_MMI) += synaptics_dsx_fw_update.o
 obj-$(CONFIG_TOUCHSCREEN_TOUCHX)        += touchx.o
 obj-$(CONFIG_WAKE_GESTURES)		+= wake_gestures.o
+obj-$(CONFIG_STATE_NOTIFIER)		+= state_notifier.o
diff --git a/drivers/input/touchscreen/atmel_mxt_ts_mmi.c b/drivers/input/touchscreen/atmel_mxt_ts_mmi.c
index c9ccc8f..8904845 100644
--- a/drivers/input/touchscreen/atmel_mxt_ts_mmi.c
+++ b/drivers/input/touchscreen/atmel_mxt_ts_mmi.c
@@ -31,6 +31,10 @@
 #include <linux/semaphore.h>
 #include <linux/atomic.h>
 
+#ifdef CONFIG_STATE_NOTIFIER
+#include <linux/state_notifier.h>
+#endif
+
 #ifdef CONFIG_WAKE_GESTURES
 #include <linux/wake_gestures.h>
 #endif
@@ -2492,10 +2496,21 @@ static void mxt_set_sensor_state(struct mxt_data *data, int state)
 		/* drop flag to allow object specific message handling */
 		if (data->in_bootloader)
 			data->in_bootloader = false;
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_QUERY, NULL);
+#endif
+		break;
 	case STATE_UNKNOWN:
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_UNKNOWN, NULL);
+#endif
+		break;
 	case STATE_FLASH:
 		/* no special handling for these states */
-			break;
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_FLASH, NULL);
+#endif
+		break;
 
 	case STATE_SUSPEND:
 		if (!data->mode_is_wakeable)
@@ -2503,8 +2518,10 @@ static void mxt_set_sensor_state(struct mxt_data *data, int state)
 		data->enable_reporting = false;
 		if (!data->in_bootloader)
 			mxt_sensor_state_config(data, SUSPEND_IDX);
-			break;
-
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_SUSPEND, NULL);
+#endif
+		break;
 #ifdef CONFIG_WAKE_GESTURES
 	case STATE_WG:
 		data->mode_is_wakeable = true;
@@ -2513,7 +2530,10 @@ static void mxt_set_sensor_state(struct mxt_data *data, int state)
 		mxt_set_t7_power_cfg(data, MXT_POWER_CFG_WG);
 		if (!data->in_bootloader)
 			mxt_sensor_state_config(data, ACTIVE_IDX);
-			break;
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_WG, NULL);
+#endif
+		break;
 #endif
 
 	case STATE_ACTIVE:
@@ -2525,24 +2545,36 @@ static void mxt_set_sensor_state(struct mxt_data *data, int state)
 			mxt_restore_default_mode(data);
 			pr_debug("Non-persistent mode; restoring default\n");
 		}
-			break;
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_ACTIVE, NULL);
+#endif
+		break;
 
 	case STATE_STANDBY:
 		mxt_irq_enable(data, false);
-			break;
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_STANDBY, NULL);
+#endif
+		break;
 
 	case STATE_BL:
 		if (!data->in_bootloader)
 			data->in_bootloader = true;
 
 		mxt_irq_enable(data, false);
-			break;
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_BL, NULL);
+#endif
+		break;
 
 	case STATE_INIT:
 		/* set flag to avoid object specific message handling */
 		if (!data->in_bootloader)
 			data->in_bootloader = true;
-			break;
+#ifdef CONFIG_STATE_NOTIFIER
+		state_notifier_call_chain(STATE_NOTIFIER_INIT, NULL);
+#endif
+		break;
 	}
 
 	pr_info("state change %s -> %s\n", mxt_state_name(current_state),
diff --git a/drivers/input/touchscreen/state_notifier.c b/drivers/input/touchscreen/state_notifier.c
new file mode 100644
index 0000000..75f83a2
--- /dev/null
+++ b/drivers/input/touchscreen/state_notifier.c
@@ -0,0 +1,49 @@
+/*
+ * State Notifier Driver
+ *
+ * Copyright (c) 2013-2015, Pranav Vashi <neobuddy89@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/state_notifier.h>
+#include <linux/notifier.h>
+#include <linux/export.h>
+
+static BLOCKING_NOTIFIER_HEAD(state_notifier_list);
+
+/**
+ *	state_register_client - register a client notifier
+ *	@nb: notifier block to callback on events
+ */
+int state_register_client(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_register(&state_notifier_list, nb);
+}
+EXPORT_SYMBOL(state_register_client);
+
+/**
+ *	state_unregister_client - unregister a client notifier
+ *	@nb: notifier block to callback on events
+ */
+int state_unregister_client(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_unregister(&state_notifier_list, nb);
+}
+EXPORT_SYMBOL(state_unregister_client);
+
+/**
+ *	state_notifier_call_chain - notify clients on state_events
+ *	@val: Value passed unmodified to notifier function
+ *	@v: pointer passed unmodified to notifier function
+ *
+ */
+int state_notifier_call_chain(unsigned long val, void *v)
+{
+	return blocking_notifier_call_chain(&state_notifier_list, val, v);
+}
+EXPORT_SYMBOL_GPL(state_notifier_call_chain);
+
diff --git a/include/linux/state_notifier.h b/include/linux/state_notifier.h
new file mode 100644
index 0000000..6212901
--- /dev/null
+++ b/include/linux/state_notifier.h
@@ -0,0 +1,27 @@
+#ifndef __LINUX_STATE_NOTIFIER_H
+#define __LINUX_STATE_NOTIFIER_H
+
+#include <linux/notifier.h>
+
+#define STATE_NOTIFIER_UNKNOWN		0x01
+#define STATE_NOTIFIER_ACTIVE		0x02
+#define STATE_NOTIFIER_SUSPEND		0x03
+#define STATE_NOTIFIER_STANDBY		0x04
+#define STATE_NOTIFIER_BL		0x05
+#define STATE_NOTIFIER_INIT		0x06
+#define STATE_NOTIFIER_FLASH		0x07
+#define STATE_NOTIFIER_QUERY		0x08
+#ifdef CONFIG_WAKE_GESTURES
+#define STATE_NOTIFIER_WG		0x09
+#endif
+#define STATE_NOTIFIER_INVALID		0x10
+
+struct state_event {
+	void *data;
+};
+
+int state_register_client(struct notifier_block *nb);
+int state_unregister_client(struct notifier_block *nb);
+int state_notifier_call_chain(unsigned long val, void *v);
+
+#endif /* _LINUX_STATE_NOTIFIER_H */
