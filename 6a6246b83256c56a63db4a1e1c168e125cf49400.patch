From 6a6246b83256c56a63db4a1e1c168e125cf49400 Mon Sep 17 00:00:00 2001
From: Paul Reioux <reioux@gmail.com>
Date: Sun, 14 Sep 2014 17:19:09 -0500
Subject: [PATCH] intellithermal v2: adapt for MSM8226 architecture

Signed-off-by: Paul Reioux <reioux@gmail.com>
Signed-off-by: spock1104 <spock1104@gmail.com>
---
 drivers/thermal/intelli/msm_thermal_v2.c | 107 +++++++++++--------------------
 1 file changed, 38 insertions(+), 69 deletions(-)

diff --git a/drivers/thermal/intelli/msm_thermal_v2.c b/drivers/thermal/intelli/msm_thermal_v2.c
index 938c4ff..5b04bb7 100644
--- a/drivers/thermal/intelli/msm_thermal_v2.c
+++ b/drivers/thermal/intelli/msm_thermal_v2.c
@@ -94,16 +94,9 @@ enum thermal_threshold {
 	THRESHOLD_MAX_NR,
 };
 
-enum sensor_id_type {
-	THERM_ZONE_ID,
-	THERM_TSENS_ID,
-	THERM_ID_MAX_NR,
-};
-
 struct cpu_info {
 	uint32_t cpu;
 	const char *sensor_type;
-	enum sensor_id_type id_type;
 	uint32_t sensor_id;
 	bool offline;
 	bool user_offline;
@@ -667,7 +660,7 @@ static ssize_t psm_reg_mode_store(struct kobject *kobj,
 static int check_sensor_id(int sensor_id)
 {
 	int i = 0;
-	bool hw_id_found = false;
+	bool hw_id_found;
 	int ret = 0;
 
 	for (i = 0; i < max_tsens_num; i++) {
@@ -806,64 +799,31 @@ static int set_and_activate_threshold(uint32_t sensor_id,
 	return ret;
 }
 
-static int therm_get_temp(uint32_t id, enum sensor_id_type type, long *temp)
-{
-	int ret = 0;
-	struct tsens_device tsens_dev;
-
-	if (!temp) {
-		pr_err("Invalid value\n");
-		ret = -EINVAL;
-		goto get_temp_exit;
-	}
-
-	switch (type) {
-	case THERM_ZONE_ID:
-		tsens_dev.sensor_num = tsens_id_map[id];
-		break;
-	case THERM_TSENS_ID:
-		tsens_dev.sensor_num = id;
-		break;
-	default:
-		pr_err("Invalid type\n");
-		ret = -EINVAL;
-		goto get_temp_exit;
-		break;
-	}
-
-	ret = tsens_get_temp(&tsens_dev, temp);
-	if (ret) {
-		pr_err("Unable to read TSENS sensor %d\n",
-			tsens_dev.sensor_num);
-		goto get_temp_exit;
-	}
-
-get_temp_exit:
-	return ret;
-}
-
-static int set_threshold(uint32_t zone_id,
+static int set_threshold(uint32_t sensor_id,
 	struct sensor_threshold *threshold)
 {
+	struct tsens_device tsens_dev;
 	int i = 0, ret = 0;
 	long temp;
 
-	if ((!threshold) || (zone_id >= max_tsens_num)) {
-		pr_err("%s: Invalid input for threshold: zone id: %u\n",
-			KBUILD_MODNAME, zone_id);
+	if ((!threshold) || check_sensor_id(sensor_id)) {
+		pr_err("%s: Invalid input\n", KBUILD_MODNAME);
 		ret = -EINVAL;
 		goto set_threshold_exit;
 	}
 
-	ret = therm_get_temp(zone_id, THERM_ZONE_ID, &temp);
-	if (ret)
+	tsens_dev.sensor_num = sensor_id;
+	ret = tsens_get_temp(&tsens_dev, &temp);
+	if (ret) {
+		pr_err("%s: Unable to read TSENS sensor %d\n",
+			KBUILD_MODNAME, tsens_dev.sensor_num);
 		goto set_threshold_exit;
-
+	}
 	while (i < MAX_THRESHOLD) {
 		switch (threshold[i].trip) {
 		case THERMAL_TRIP_CONFIGURABLE_HI:
 			if (threshold[i].temp >= temp) {
-				ret = set_and_activate_threshold(zone_id,
+				ret = set_and_activate_threshold(sensor_id,
 					&threshold[i]);
 				if (ret)
 					goto set_threshold_exit;
@@ -871,7 +831,7 @@ static int set_threshold(uint32_t zone_id,
 			break;
 		case THERMAL_TRIP_CONFIGURABLE_LOW:
 			if (threshold[i].temp <= temp) {
-				ret = set_and_activate_threshold(zone_id,
+				ret = set_and_activate_threshold(sensor_id,
 					&threshold[i]);
 				if (ret)
 					goto set_threshold_exit;
@@ -1007,6 +967,7 @@ static __ref int do_hotplug(void *data)
 
 static int do_ocr(void)
 {
+	struct tsens_device tsens_dev;
 	long temp = 0;
 	int ret = 0;
 	int i = 0, j = 0;
@@ -1017,10 +978,11 @@ static int do_ocr(void)
 
 	mutex_lock(&ocr_mutex);
 	for (i = 0; i < max_tsens_num; i++) {
-		ret = therm_get_temp(tsens_id_map[i], THERM_TSENS_ID, &temp);
+		tsens_dev.sensor_num = tsens_id_map[i];
+		ret = tsens_get_temp(&tsens_dev, &temp);
 		if (ret) {
 			pr_debug("%s: Unable to read TSENS sensor %d\n",
-					__func__, tsens_id_map[i]);
+					__func__, tsens_dev.sensor_num);
 			auto_cnt++;
 			continue;
 		}
@@ -1062,6 +1024,7 @@ static int do_ocr(void)
 
 static int do_vdd_restriction(void)
 {
+	struct tsens_device tsens_dev;
 	long temp = 0;
 	int ret = 0;
 	int i = 0;
@@ -1077,10 +1040,11 @@ static int do_vdd_restriction(void)
 
 	mutex_lock(&vdd_rstr_mutex);
 	for (i = 0; i < max_tsens_num; i++) {
-		ret = therm_get_temp(tsens_id_map[i], THERM_TSENS_ID, &temp);
+		tsens_dev.sensor_num = tsens_id_map[i];
+		ret = tsens_get_temp(&tsens_dev, &temp);
 		if (ret) {
-			pr_debug("Unable to read TSENS sensor %d\n",
-				tsens_id_map[i]);
+			pr_debug("%s: Unable to read TSENS sensor %d\n",
+					__func__, tsens_dev.sensor_num);
 			dis_cnt++;
 			continue;
 		}
@@ -1109,6 +1073,7 @@ static int do_vdd_restriction(void)
 
 static int do_psm(void)
 {
+	struct tsens_device tsens_dev;
 	long temp = 0;
 	int ret = 0;
 	int i = 0;
@@ -1116,10 +1081,11 @@ static int do_psm(void)
 
 	mutex_lock(&psm_mutex);
 	for (i = 0; i < max_tsens_num; i++) {
-		ret = therm_get_temp(tsens_id_map[i], THERM_TSENS_ID, &temp);
+		tsens_dev.sensor_num = tsens_id_map[i];
+		ret = tsens_get_temp(&tsens_dev, &temp);
 		if (ret) {
 			pr_debug("%s: Unable to read TSENS sensor %d\n",
-					__func__, tsens_id_map[i]);
+					__func__, tsens_dev.sensor_num);
 			auto_cnt++;
 			continue;
 		}
@@ -1196,13 +1162,15 @@ static void __ref do_freq_control(long temp)
 static void __ref check_temp(struct work_struct *work)
 {
 	static int limit_init;
+	struct tsens_device tsens_dev;
 	long temp = 0;
 	int ret = 0;
 
-	ret = therm_get_temp(msm_thermal_info.sensor_id, THERM_TSENS_ID, &temp);
+	tsens_dev.sensor_num = msm_thermal_info.sensor_id;
+	ret = tsens_get_temp(&tsens_dev, &temp);
 	if (ret) {
-		pr_debug("Unable to read TSENS sensor %d\n",
-				msm_thermal_info.sensor_id);
+		pr_debug("%s: Unable to read TSENS sensor %d\n",
+				KBUILD_MODNAME, tsens_dev.sensor_num);
 		goto reschedule;
 	}
 
@@ -1315,6 +1283,7 @@ static int hotplug_notify(enum thermal_trip_type type, int temp, void *data)
 /* Adjust cpus offlined bit based on temperature reading. */
 static int hotplug_init_cpu_offlined(void)
 {
+	struct tsens_device tsens_dev;
 	long temp = 0;
 	uint32_t cpu = 0;
 
@@ -1325,10 +1294,10 @@ static int hotplug_init_cpu_offlined(void)
 	for_each_possible_cpu(cpu) {
 		if (!(msm_thermal_info.core_control_mask & BIT(cpus[cpu].cpu)))
 			continue;
-		if (therm_get_temp(cpus[cpu].sensor_id, cpus[cpu].id_type,
-					&temp)) {
+		tsens_dev.sensor_num = cpus[cpu].sensor_id;
+		if (tsens_get_temp(&tsens_dev, &temp)) {
 			pr_err("%s: Unable to read TSENS sensor %d\n",
-				KBUILD_MODNAME, cpus[cpu].sensor_id);
+				KBUILD_MODNAME, tsens_dev.sensor_num);
 			mutex_unlock(&core_control_mutex);
 			return -EINVAL;
 		}
@@ -1365,7 +1334,6 @@ static void hotplug_init(void)
 	for_each_possible_cpu(cpu) {
 		cpus[cpu].sensor_id =
 			sensor_get_id((char *)cpus[cpu].sensor_type);
-		cpus[cpu].id_type = THERM_ZONE_ID;
 		if (!(msm_thermal_info.core_control_mask & BIT(cpus[cpu].cpu)))
 			continue;
 
@@ -1905,6 +1873,9 @@ static __init int msm_thermal_add_stat_nodes(void)
 	return ret;
 }
 
+static int virtual_sensor0 = -EINVAL;
+module_param(virtual_sensor0, int, 0644);
+
 int __devinit msm_thermal_init(struct msm_thermal_data *pdata)
 {
 	int ret = 0;
@@ -1946,8 +1917,6 @@ int __devinit msm_thermal_init(struct msm_thermal_data *pdata)
 
 	/* emulate default behavior */
 	disable_msm_thermal();
-	hotplug_init();
-	freq_mitigation_init();
 	enabled = 0;
 
 	return ret;
