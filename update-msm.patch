From 49c3b81ecece5eea9ffdaa5119acc22fa3c6688c Mon Sep 17 00:00:00 2001
From: flar2 <asegaert@gmail.com>
Date: Tue, 3 Dec 2013 19:47:59 -0500
Subject: [PATCH] Update msm-sleeper and add sysfs entry for maxscreenoff

Signed-off-by: flar2 <asegaert@gmail.com>
---
 arch/arm/mach-msm/cpufreq.c     | 42 +++++++++++++++++++++++------------------
 arch/arm/mach-msm/msm-sleeper.c | 39 +++++++++++++++++++++-----------------
 2 files changed, 46 insertions(+), 35 deletions(-)

diff --git a/arch/arm/mach-msm/cpufreq.c b/arch/arm/mach-msm/cpufreq.c
index ca66171..793bff7 100644
--- a/arch/arm/mach-msm/cpufreq.c
+++ b/arch/arm/mach-msm/cpufreq.c
@@ -37,7 +37,7 @@
 #endif
 
 /* maxscroff */
-uint32_t maxscroff_freq = 702000;
+uint32_t maxscroff_freq = 1134000;
 uint32_t maxscroff = 0;
 
 #ifdef CONFIG_SMP
@@ -72,23 +72,6 @@ static DEFINE_PER_CPU(struct cpu_freq, cpu_freq_info);
 
 static int override_cpu;
 
-/**maxscroff**/
-static int __init cpufreq_read_arg_maxscroff(char *max_so)
-{
-	if (strcmp(max_so, "0") == 0) {
-		maxscroff = 0;
-	} else if (strcmp(max_so, "1") == 0) {
-		maxscroff = 1;
-	} else {
-		maxscroff = 0;
-	}
-	return 1;
-}
-
-__setup("max_so=", cpufreq_read_arg_maxscroff);
-/**end maxscroff**/
-
-
 static int set_cpu_freq(struct cpufreq_policy *policy, unsigned int new_freq)
 {
 	int ret = 0;
@@ -454,6 +437,28 @@ struct freq_attr msm_cpufreq_attr_max_screen_off_khz = {
 	.store = store_max_screen_off_khz,
 };
 
+static ssize_t show_max_screen_off(struct cpufreq_policy *policy, char *buf)
+{
+	return sprintf(buf, "%u\n", maxscroff);
+}
+
+static ssize_t store_max_screen_off(struct cpufreq_policy *policy,
+		const char *buf, size_t count)
+{
+	if (buf[0] >= '0' && buf[0] <= '1' && buf[1] == '\n')
+            if (maxscroff != buf[0] - '0') 
+		        maxscroff = buf[0] - '0';
+
+	return count;
+}
+
+struct freq_attr msm_cpufreq_attr_max_screen_off = {
+	.attr = { .name = "screen_off_max",
+		.mode = 0644,
+	},
+	.show = show_max_screen_off,
+	.store = store_max_screen_off,
+};
 
 /** end maxscreen off sysfs interface **/
 
@@ -462,6 +467,7 @@ static struct freq_attr *msm_freq_attr[] = {
 	&cpufreq_freq_attr_scaling_available_freqs,
 /** maxscreen off sysfs interface **/
 	&msm_cpufreq_attr_max_screen_off_khz,
+	&msm_cpufreq_attr_max_screen_off,
 	NULL,
 };
 
diff --git a/arch/arm/mach-msm/msm-sleeper.c b/arch/arm/mach-msm/msm-sleeper.c
index 33b249b..ac03f57 100644
--- a/arch/arm/mach-msm/msm-sleeper.c
+++ b/arch/arm/mach-msm/msm-sleeper.c
@@ -21,35 +21,40 @@
 #include <mach/cpufreq.h>
 
 #define MSM_SLEEPER_MAJOR_VERSION	1
-#define MSM_SLEEPER_MINOR_VERSION	1
+#define MSM_SLEEPER_MINOR_VERSION	2
 
 extern uint32_t maxscroff;
 extern uint32_t maxscroff_freq;
+static bool limit_set = false;
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static void __cpuinit msm_sleeper_early_suspend(struct early_suspend *h)
 {
-  int cpu;
-
-  for_each_possible_cpu(cpu) {
-    msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, maxscroff_freq);
-          pr_info("msm-sleeper: limit max frequency to: %d\n", maxscroff_freq);
-      }
-  return; 
-
-
-
+	int cpu;
+
+	if (maxscroff) {
+		for_each_possible_cpu(cpu) {
+			msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, maxscroff_freq);
+		}
+		limit_set = true;
+		pr_info("msm-sleeper: limit max frequency to: %d\n", maxscroff_freq);
+	}
+	return; 
 }
 
 static void __cpuinit msm_sleeper_late_resume(struct early_suspend *h)
 {
-  int cpu;
+	int cpu;
+
+	if (!limit_set)
+		return;
 
-  for_each_possible_cpu(cpu) {
-    msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, MSM_CPUFREQ_NO_LIMIT);
-          pr_info("msm-sleeper: restore max frequency.\n");
-      }
-  return; 
+	for_each_possible_cpu(cpu) {
+		msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, MSM_CPUFREQ_NO_LIMIT);
+	}
+	limit_set = 0;
+	pr_info("msm-sleeper: restore max frequency.\n");
+	return; 
 
 }
 
