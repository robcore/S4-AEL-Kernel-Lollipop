From ce2d15c86c65b3203f0adbea33bf11ce6c1c0ca2 Mon Sep 17 00:00:00 2001
From: Brooke Spencer <xXminiWHOOPERxX@gmail.com>
Date: Wed, 4 Mar 2015 17:55:44 -0500
Subject: [PATCH] fixed old commits, fix for app-mounted directories (thanks
 @mkasick)

---
 arch/arm/configs/dlxp_ul_defconfig |  2 ++
 fs/Kconfig                         | 25 +++++++++++++++++++++++++
 fs/namespace.c                     | 31 ++++++++++++++++++++++++++++++-
 3 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/arch/arm/configs/dlxp_ul_defconfig b/arch/arm/configs/dlxp_ul_defconfig
index f297531..ebe3fb2 100644
--- a/arch/arm/configs/dlxp_ul_defconfig
+++ b/arch/arm/configs/dlxp_ul_defconfig
@@ -1860,6 +1860,7 @@ CONFIG_UNIX98_PTYS=y
 # CONFIG_TRACE_SINK is not set
 # CONFIG_DEVMEM is not set
 # CONFIG_DEVKMEM is not set
+CONFIG_FRANDOM=y
 
 #
 # Serial drivers
@@ -3407,6 +3408,7 @@ CONFIG_ANDROID_LOW_MEMORY_KILLER_AUTODETECT_OOM_ADJ_VALUES=y
 # CONFIG_ANDROID_INTF_ALARM_DEV is not set
 # CONFIG_PHONE is not set
 # CONFIG_USB_WPAN_HCD is not set
+CONFIG_CPUPOWER=y
 
 #
 # Qualcomm MSM specific device drivers
diff --git a/fs/Kconfig b/fs/Kconfig
index df51eee..3fb1ca3 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -179,6 +179,31 @@ config HUGETLB_PAGE
 
 source "fs/configfs/Kconfig"
 
+config RESTRICT_ROOTFS_SLAVE
+	bool "Android: Restrict rootfs slave mountspace to /storage"
+	help
+	  Restrict slave mountspace so Dalvik apps can mount system-wide volumes
+
+	  Android 4.2 implements multi-user storage using per-process mount
+	  namespaces.  Everything under "/" (the entire filesystem hierarchy) is
+	  marked as a recursive-slave mountspace for all zygote instances.  This is
+	  done so that user-storage sandbox mounts under /storage/emulated are hidden
+	  from other apps and users.  Unfortunately this means that any Dalvik app
+	  (actually, any program whose clone/fork ancestry includes a Dalvik zygote,
+	  which is everything except services spawned directly from init) cannot
+	  mount system-wide volumes.
+
+	  This option restricts rootfs-slave calls to /storage (and
+	  /mnt/shell/emulated) so that Dalvik apps can mount system-wide volumes
+	  elsewhere (with appropriate permission, as in earlier versions of Android),
+	  while retaining full multi-user storage compatibility.  It is made
+	  available as a kernel-based workaround for instances where libdvm can not
+	  be modified.
+
+	  This option requires that a tmpfs volume is mounted as /storage in
+	  Android init.rc.  If this volume is unavailable, then we fall back to the
+	  previous behavior of marking the entire filesystem hierarchy as slave.
+
 endmenu
 
 menuconfig MISC_FILESYSTEMS
diff --git a/fs/namespace.c b/fs/namespace.c
index 86803cd..cca2981 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1256,7 +1256,6 @@ static int graft_tree(struct mount *mnt, struct path *path)
 	return attach_recursive_mnt(mnt, path, NULL);
 }
 
-
 static int flags_to_propagation_type(int flags)
 {
 	int type = flags & ~(MS_REC | MS_SILENT);
@@ -1791,6 +1790,36 @@ long do_mount(char *dev_name, char *dir_name, char *type_page,
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
+#ifdef CONFIG_RESTRICT_ROOTFS_SLAVE
+	/* Check if this is an attempt to mark "/" as recursive-slave. */
+	if (strcmp(dir_name, "/") == 0 && flags == (MS_SLAVE | MS_REC)) {
+		static const char storage[] = "/storage";
+		static const char source[]  = "/mnt/shell/emulated";
+		long res;
+
+		/* Mark /storage as recursive-slave instead. */
+		if ((res = do_mount(NULL, (char *)storage, NULL, (MS_SLAVE | MS_REC), NULL)) == 0) {
+			/* Unfortunately bind mounts from outside /storage may retain the
+			 * recursive-shared property (bug?).  This means any additional
+			 * namespace-specific bind mounts (e.g., /storage/emulated/0/Android/obb)
+			 * will also appear, shared in all namespaces, at their respective source
+			 * paths (e.g., /mnt/shell/emulated/0/Android/obb), possibly leading to
+			 * hundreds of /proc/mounts-visible bind mounts.  As a workaround, mark
+			 * /mnt/shell/emulated also as recursive-slave so that subsequent bind
+			 * mounts are confined to their namespaces. */
+			if ((res = do_mount(NULL, (char *)source, NULL, (MS_SLAVE | MS_REC), NULL)) == 0)
+				/* Both paths successfully marked as slave, leave the rest of the
+				 * filesystem hierarchy alone. */
+				return 0;
+			else
+				pr_warn("Failed to mount %s as MS_SLAVE: %ld\n", source, res);
+		} else {
+			pr_warn("Failed to mount %s as MS_SLAVE: %ld\n", storage, res);
+		}
+		/* Fallback: Mark rootfs as recursive-slave as requested. */
+	}
+#endif
+
 	
 	retval = kern_path(dir_name, LOOKUP_FOLLOW, &path);
 	if (retval)
