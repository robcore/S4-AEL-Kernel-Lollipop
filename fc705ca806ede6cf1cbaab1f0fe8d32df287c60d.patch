From fc705ca806ede6cf1cbaab1f0fe8d32df287c60d Mon Sep 17 00:00:00 2001
From: friedrich420 <kelpidorou@yahoo.com>
Date: Fri, 12 Feb 2016 22:00:14 +0200
Subject: [PATCH] drivers: create sysfs to enable/disable sensorhub, ssp &
 bcm4773 wakelocks [imoseyon and UpInTheAir]

---
 drivers/base/power/wakeup.c        |  26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+)

diff --git a/drivers/base/power/wakeup.c b/drivers/base/power/wakeup.c
index f3df57c..a9af267 100755
--- a/drivers/base/power/wakeup.c
+++ b/drivers/base/power/wakeup.c
@@ -18,6 +18,17 @@
 
 #include "power.h"
 
+#include <linux/moduleparam.h>
+
+static bool enable_sensorhub_wl = true;
+module_param(enable_sensorhub_wl, bool, 0644);
+
+static bool enable_ssp_wl = true;
+module_param(enable_ssp_wl, bool, 0644);
+
+static bool enable_bcm4773_wl = true;
+module_param(enable_bcm4773_wl, bool, 0644);
+
 /*
  * If set, the suspend/hibernate code will abort transitions to a sleep state
  * if wakeup events are registered during or immediately before the transition.
@@ -382,6 +393,21 @@ static void wakeup_source_activate(struct wakeup_source *ws)
 {
 	unsigned int cec;
 
+	if (!enable_sensorhub_wl && !strcmp(ws->name, "ssp_sensorhub_wake_lock")) {
+		pr_info("wakeup source sensorhub activation skipped\n");
+		return;
+	}
+
+	if (!enable_ssp_wl && !strcmp(ws->name, "ssp_wake_lock")) {
+		pr_info("wakeup source ssp activation skipped\n");
+		return;
+	}
+
+	if (!enable_bcm4773_wl && !strcmp(ws->name, "bcm4773_wake_lock")) {
+		pr_info("wakeup source bcm4773 activation skipped\n");
+		return;
+	}
+
 	/*
 	 * active wakeup source should bring the system
 	 * out of PM_SUSPEND_FREEZE state
