From 1a4bd6f629291a0cc4e41c12e2a22acb332a2058 Mon Sep 17 00:00:00 2001
From: flar2 <asegaert@gmail.com>
Date: Sat, 6 Sep 2014 19:37:42 -0400
Subject: [PATCH] msm-sleeper: save max freq

Signed-off-by: flar2 <asegaert@gmail.com>
---
 arch/arm/mach-msm/cpufreq.c     | 63 +++++++++++++++++++++++++++++++++++++++--
 arch/arm/mach-msm/msm-sleeper.c |  5 ++--
 2 files changed, 64 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-msm/cpufreq.c b/arch/arm/mach-msm/cpufreq.c
index 78f8b40..dba596d 100644
--- a/arch/arm/mach-msm/cpufreq.c
+++ b/arch/arm/mach-msm/cpufreq.c
@@ -47,6 +47,9 @@ static struct workqueue_struct *msm_cpufreq_wq;
 uint32_t maxscroff_freq = 1026000;
 uint32_t maxscroff = 1;
 
+/* ex max freq */
+uint32_t ex_max_freq;
+
 struct cpufreq_suspend_t {
 	struct mutex suspend_mutex;
 	int device_suspended;
@@ -396,6 +399,61 @@ static int msm_cpufreq_resume(struct cpufreq_policy *policy)
 	return 0;
 }
 
+/** max freq interface **/
+
+static ssize_t show_ex_max_freq(struct cpufreq_policy *policy, char *buf)
+{
+	if (!ex_max_freq)
+		ex_max_freq = policy->max;
+
+	return sprintf(buf, "%u\n", ex_max_freq);
+}
+
+static ssize_t store_ex_max_freq(struct cpufreq_policy *policy,
+		const char *buf, size_t count)
+{
+	unsigned int freq = 0;
+	int ret, cpu;
+	int index;
+	struct cpufreq_frequency_table *freq_table = cpufreq_frequency_get_table(policy->cpu);
+
+	if (!freq_table)
+		return -EINVAL;
+
+	ret = sscanf(buf, "%u", &freq);
+	if (ret != 1)
+		return -EINVAL;
+
+	mutex_lock(&per_cpu(cpufreq_suspend, policy->cpu).suspend_mutex);
+
+	ret = cpufreq_frequency_table_target(policy, freq_table, freq,
+			CPUFREQ_RELATION_H, &index);
+	if (ret)
+		goto out;
+
+	ex_max_freq = freq_table[index].frequency;
+
+	for_each_possible_cpu(cpu) {
+		msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, ex_max_freq);
+	}
+	cpufreq_update_policy(cpu);
+
+	ret = count;
+
+out:
+	mutex_unlock(&per_cpu(cpufreq_suspend, policy->cpu).suspend_mutex);
+	return ret;
+}
+
+struct freq_attr msm_cpufreq_attr_ex_max_freq = {
+	.attr = { .name = "ex_max_freq",
+		.mode = 0666,
+	},
+	.show = show_ex_max_freq,
+	.store = store_ex_max_freq,
+};
+/** end max freq interface **/
+
 /** maxscreen off sysfs interface **/
 
 static ssize_t show_max_screen_off_khz(struct cpufreq_policy *policy, char *buf)
@@ -436,7 +494,7 @@ static ssize_t store_max_screen_off_khz(struct cpufreq_policy *policy,
 
 struct freq_attr msm_cpufreq_attr_max_screen_off_khz = {
 	.attr = { .name = "screen_off_max_freq",
-		.mode = 0644,
+		.mode = 0666,
 	},
 	.show = show_max_screen_off_khz,
 	.store = store_max_screen_off_khz,
@@ -459,7 +517,7 @@ static ssize_t store_max_screen_off(struct cpufreq_policy *policy,
 
 struct freq_attr msm_cpufreq_attr_max_screen_off = {
 	.attr = { .name = "screen_off_max",
-		.mode = 0644,
+		.mode = 0666,
 	},
 	.show = show_max_screen_off,
 	.store = store_max_screen_off,
@@ -473,6 +531,7 @@ static struct freq_attr *msm_freq_attr[] = {
 /** maxscreen off sysfs interface **/
 	&msm_cpufreq_attr_max_screen_off_khz,
 	&msm_cpufreq_attr_max_screen_off,
+	&msm_cpufreq_attr_ex_max_freq,
 	NULL,
 };
 
diff --git a/arch/arm/mach-msm/msm-sleeper.c b/arch/arm/mach-msm/msm-sleeper.c
index 91ba847..3b4c064 100644
--- a/arch/arm/mach-msm/msm-sleeper.c
+++ b/arch/arm/mach-msm/msm-sleeper.c
@@ -21,10 +21,11 @@
 #include <mach/cpufreq.h>
 
 #define MSM_SLEEPER_MAJOR_VERSION	1
-#define MSM_SLEEPER_MINOR_VERSION	1
+#define MSM_SLEEPER_MINOR_VERSION	2
 
 extern uint32_t maxscroff;
 extern uint32_t maxscroff_freq;
+extern uint32_t ex_max_freq;
 static int limit_set = 0;
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
@@ -50,7 +51,7 @@ static void msm_sleeper_late_resume(struct early_suspend *h)
 		return;
 
 	for_each_possible_cpu(cpu) {
-		msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, MSM_CPUFREQ_NO_LIMIT);
+		msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, ex_max_freq);
 		pr_info("msm-sleeper: restore max frequency.\n");
 	}
 	limit_set = 0;
